# .bashrc for work mac

# Order is:
# - programs from homebrew
# - programs from ~/bin
#   (mostly platform independent things (e.g., written in Python), mostly
#   stored on github)
# - the normal PATH
export PATH=/usr/local/bin:${HOME}/bin:${PATH}

# Add TeX stuff
export PATH=${PATH}:/usr/local/texlive/2017basic/bin/x86_64-darwin/

export EDITOR=/usr/bin/vim

# Ask bash not to remember duplicate commands in its history list
export HISTCONTROL=ignoredups

# Use colours for listings
alias ls='ls -G'

# Stuff I don't want on github...
source ~/.bashrc_local

# Some useful shortcuts for working with virtual environments
# - I used to use virtualenvwrapper, but I'm not convinced I need all of that
#   and I've had some bad experiences of it with Python 3

# The directory where I keep my virtual environments - this must already exist
VIRTUAL_ENV_DIR=${HOME}/.env

function mkvirtualenv {
    if [ $# != 1 ]
    then
        echo The name of a virtual environment must be specified
        return 1
    fi
    python3 -m venv ${VIRTUAL_ENV_DIR}/${1}
}

function workon {
    if [ $# != 1 ]
    then
        echo The name of a virtual environment must be specified
        return 1
    fi
    source ${VIRTUAL_ENV_DIR}/${1}/bin/activate
}

# A convenient way to run a Jupyter notebook server
alias jup="jupyter notebook --notebook-dir=${HOME}/jupyter-notebooks --no-browser --ip=0.0.0.0"

# Go has its own demands. I don't really want to care, but still.
# The homebrew installation recommends:
export PATH=$PATH:/usr/local/opt/go/libexec/bin
# and it seems sensible to corral the GOPATH (see https://golang.org/doc/code.html#GOPATH)
export GOPATH=${HOME}/sw/go
# Apparently I might also want to do:
# export PATH=$PATH:$(go env GOPATH)/bin

# If I've done "brew install coreutils" then it installs things on the PATH
# with 'g' prefixes, and to make them available under the normal names suggest:
export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH

# I've found this useful...
function grin-replace {
	if [ $# != 2 ]
	then
	  echo Two arguments are needed: original-string and final-string
	  echo NB: neither argument should countain /
	  return 1
	fi
	grin -l "${1}"  | xargs -n 1 sed -i "" -e "s/${1}/${2}/g"
}

# On the Mac "hostname" can give whatever name was assigned by reverse lookup
# which can be unhelpful. So instead we do:
COMPUTER_NAME=$(scutil --get ComputerName)

# ANSI color codes
# NB: apparently bash wants us to wrap non-printing characters in \[ .. \],
# otherwise linewrap goes wrong (i.e., the square brackets bash to ignore the
# non-printing control characters when calculating the width of the prompt)
RS="\[\e[0m\]"    # reset
HC="\[\e[1m\]"    # hicolor/bold
UL="\[\e[4m\]"    # underline
INV="\[\e[7m\]"   # inverse background and foreground
FBLK="\[\e[30m\]" # foreground black
FRED="\[\e[31m\]" # foreground red
FGRN="\[\e[32m\]" # foreground green
FYEL="\[\e[33m\]" # foreground yellow
FBLE="\[\e[34m\]" # foreground blue
FMAG="\[\e[35m\]" # foreground magenta
FCYN="\[\e[36m\]" # foreground cyan
FWHT="\[\e[37m\]" # foreground white
BBLK="\[\e[40m\]" # background black
BRED="\[\e[41m\]" # background red
BGRN="\[\e[42m\]" # background green
BYEL="\[\e[43m\]" # background yellow
BBLE="\[\e[44m\]" # background blue
BMAG="\[\e[45m\]" # background magenta
BCYN="\[\e[46m\]" # background cyan
BWHT="\[\e[47m\]" # background white

if [ "$PS1" ]
then
  # By default, Mac OS X does not run X11. Running xmodmap would start it...
  if [ "`uname`" != "Darwin" ]; then
    # Disable the capslock key, if possible
    xmodmap -e "remove lock = Caps_Lock"
  fi

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

  # Emphasise the hostname in bold red. Use the COMPUTER_NAME rather than \h,
  # since \g uses "hostname" to calculate its value
  # PROMPT_START="\u@${FRED}${COMPUTER_NAME}${RS} \W"
  # Or just the user name in red, followed by the current directory
  PROMPT_START="${FRED}\u${RS} \W"
  PROMPT_END="\$ "
  #export PS1=${PROMPT_START}${PROMPT_END}

  # get current branch in git repo
  function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
      STAT=`parse_git_dirty`
      echo " (${BRANCH}${STAT})"
    else
      echo ""
    fi
  }

  # get current status of git repo
  function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
            bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
            bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
            bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
            bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
            bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
            bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
            echo " ${bits}"
    else
            echo ""
    fi
  }

  # Thanks to Bert for the exit smiley idea
  exit_smiley() {
      local EXIT="$?"
      if [ ${EXIT} != 0 ]; then
          echo ' ðŸ˜¡ '
      else
          echo ' ðŸ˜ƒ '
      fi
  }

  export PS1=${PROMPT_START}\`exit_smiley\`${FGRN}\`parse_git_branch\`${RS}${PROMPT_END}

  # If we've installed git with homebrew, then we get completion this way
  if [ -e /usr/local/etc/bash_completion.d/git-completion.bash ]
  then
    source /usr/local/etc/bash_completion.d/git-completion.bash
  fi
  if [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ]
  then
    source /usr/local/etc/bash_completion.d/git-prompt.sh
  fi

  case $TERM in
    xterm* | Eterm | screen* | rxvt )
      # Set the window title
      PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
    ;;
  esac

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# vim: set tabstop=8 softtabstop=4 shiftwidth=4 expandtab:
