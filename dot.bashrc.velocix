# .bashrc
#
# Setup for my work Mac, pending integtation into the github setup

# Which computer am I on? (e.g., spoon, ghlenlivid, etc.)
COMPUTER_NAME=`hostname -s`

alias blade='ssh -Y bladefvx-tibbs.eng.velocix.com'
alias blackduck='ssh -Y usilblackduck.ndc.lucent.com'

# The 'mvim' script defaults to looking for MacVim in /Applications,
# but I keep it in /Applications/Extras
export VIM_APP_DIR=/Applications/Extras
# Use the console ("restricted") version of MacVim as our editor
export EDITOR=rMacVim

# Make the various things in the Python binary directory (maybe including scons)
# available
#export PATH=${PATH}:/System/Library/Frameworks/Python.framework/Versions/Current/bin/

# Some extra Python scripts/modules
export PATH=$PATH:${HOME}/Python
export PYTHONPATH=${HOME}/Python:${PYTHONPATH}

# Enabling bash completion needs extra work, as it doesn't appear to come
# with the standard system.
# Use the version of git installed from a package:
if [ -d /usr/local/git/contrib/completion ]; then
  source /usr/local/git/contrib/completion/git-completion.bash
  source /usr/local/git/contrib/completion/git-prompt.sh
fi
# Check if I've installed it with homebrew...
#if [ -f $(brew --prefix)/etc/bash_completion ]; then
#  . $(brew --prefix)/etc/bash_completion
#fi
#
# And similarly with git bash completion
#if [ -f $(brew --prefix)/etc/bash_completion.d/git-completion.bash ]; then
#  . $(brew --prefix)/etc/bash_completion.d/git-completion.bash
#fi
#
# and prompting
#if [ -f $(brew --prefix)/etc/bash_completion.d/git-prompt.sh ]; then
#  . $(brew --prefix)/etc/bash_completion.d/git-prompt.sh
#fi

export EDITOR=/usr/bin/vim

# Locally built programs

# The "bin" directory is mostly platform independent things
# (e.g., written in Python), mostly stored on github
export PATH=$PATH:${HOME}/bin

# Opening a file in an existing Vim
alias gv="gvim --remote-silent"
# And in a new tab
alias gvt="gvim --remote-tab"

# When using IPython, provide a pysh shortcut
alias pysh="ipython -p sh"

# Run a new shell "inside" ssh-agent, so I can use ssh-add
alias ssh_shell=" exec ssh-agent bash"
# but also see my .profile which uses keychain instead...

# What...
alias what="${HOME}/Dropbox/what.py"
alias report_hours="${HOME}/Dropbox/hours/report_hours.py"

alias gitlog="git --no-pager log --oneline --graph --all --decorate"

# Ask bash not to remember duplicate commands in its history list
export HISTCONTROL=ignoredups

# or, apparently, one can set things to ignore by:
#export HISTIGNORE="&:ls:[bf]g:exit"
# which would ignore duplicates, "ls" on a line by itself, and the "bg", "fg"
# and "exit" commands.

# Have we got virtualenvwrapper?
# If so, use "workon" to find out what virtualenv's exist, and to choose one
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  export WORKON_HOME=$HOME/env
  export PROJECT_HOME=$HOME/sw
  source /usr/local/bin/virtualenvwrapper.sh

  # We may also want the following, to make pip aware of virtualenvwrapper
  export PIP_VIRTUALENV_BASE=$WORKON_HOME
  # and to allow use of pip to detect an active virtualenv without needing the
  # -E switch
  export PIP_RESPECT_VIRTUALENV=true
fi

# I can never remember the switches to diff I use for patch preparation
# - this is as much a convenient memo as an actual command to use
# Usage: patchdiff <old-dir> <new-dir>
alias patchdiff="diff -NbBrua"
# "b" means ignore whitespace changes
# "B" means ignore blank lines
# "a" means treat all files as text
# "r" means recursive
# "u" means use unified diff (3 lines of context)
# "N" means treat new files as empty.
# "patch" itself suggests "diff -Naur"

# By default, ls appears to sort ignoring the "dot" in filenames. I find this
# disconcerting. The "info" page on ls suggests that this may be due to the
# locale in force (although LC_ALL does not appear to be set by default).
# Regardless, setting the locale to C appears to make ls work the way I am
# used to again - although what else does it affect?
###export LC_ALL=C

# Enable colour in listings at the terminal
# HOSTTYPE appears to be defined on spot (which is FreeBSD), and not on
# (for instance) sparkler, which is Linux
if [ "$HOSTTYPE" == "FreeBSD" -o "`uname`" == "Darwin" ]
then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
    # Try for colours that work better on a light background
    LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35'
    export LS_COLORS
    ##if [ "$COMPUTER_NAME" == "sparkler" ]
    ##then
    ##  # And set the colours I want - this tries to avoid the yellow-on-white
    ##  # effect I normally get for "mknod" file types
    ##  LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=47;33:so=01;35:do=01;35:bd=47;33;01:cd=47;33;01:or=43;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:';
    ##  export LS_COLORS
    ##  # (see the dircolors utility for how to work out these commands)
    ##fi
fi

# Maybe try using vi mode for command line editing, instead of (the default)
# emacs mode... the snag is there's no visual indication of what mode one is in
# set -o vi

# ANSI color codes
# NB: apparently bash wants us to wrap non-printing characters in \[ .. \],
# otherwise linewrap goes wrong (i.e., the square brackets bash to ignore the
# non-printing control characters when calculating the width of the prompt)
RS="\[\e[0m\]"    # reset
HC="\[\e[1m\]"    # hicolor/bold
UL="\[\e[4m\]"    # underline
INV="\[\e[7m\]"   # inverse background and foreground
FBLK="\[\e[30m\]" # foreground black
FRED="\[\e[31m\]" # foreground red
FGRN="\[\e[32m\]" # foreground green
FYEL="\[\e[33m\]" # foreground yellow
FBLE="\[\e[34m\]" # foreground blue
FMAG="\[\e[35m\]" # foreground magenta
FCYN="\[\e[36m\]" # foreground cyan
FWHT="\[\e[37m\]" # foreground white
BBLK="\[\e[40m\]" # background black
BRED="\[\e[41m\]" # background red
BGRN="\[\e[42m\]" # background green
BYEL="\[\e[43m\]" # background yellow
BBLE="\[\e[44m\]" # background blue
BMAG="\[\e[45m\]" # background magenta
BCYN="\[\e[46m\]" # background cyan
BWHT="\[\e[47m\]" # background white

if [ "$PS1" ]
then
  # By default, Mac OS X does not run X11. Running xmodmap would start it...
  if [ "`uname`" != "Darwin" ]; then
    # Disable the capslock key, if possible
    xmodmap -e "remove lock = Caps_Lock"
  fi

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

  # Emphasise the hostname ("\h") in red
  PS1="[\u@${FRED}\h${RS} \W]\$ "
  #if [ -x /usr/bin/git ]
  #then
  #  # If we're within a git repository, put the branch in light green
  #  # in the middle of the prompt. See above about \[ .. \]
  #  PS1="[\u${FRED}\h\${RS}'$(__git_ps1 " ${FGRN}%s${RS}")']\$"
  #  PS1=${PROMPT_START}'$(__git_ps1 " \[\e[1;32m\]%s\[\e[m\]")'${PROMPT_END}
  #fi

  case $TERM in
    xterm* | Eterm | screen* | rxvt )
      # Set the window title
      PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
    ;;
  esac

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# vim: set tabstop=8 softtabstop=2 shiftwidth=2 expandtab filetype=sh:
